@startuml

Inventory -down->"*" Instrument
Instrument o-right-"1" InstrumentSpec
Mandolin -up-|> Instrument
note right on link
  汎化
end note
Guitar -up-|> Instrument
note right on link
  汎化
end note

InstrumentSpec -up->"1" Builder
InstrumentSpec -up->"1" Type
InstrumentSpec -right->"1" Wood : TopWood
InstrumentSpec -right->"1" Wood : BackWood
Builder -[hidden]down- Type
Type -[hidden]down- Wood

MandolinSpec -up-|> InstrumentSpec
note right on link
  汎化
end note

MandolinSpec -->"1" Style
GuitarSpec -up-|> InstrumentSpec
note right on link
  汎化
end note

note left of Instrument
  集約
end note

class Inventory {
inventory:Instrument[*]
addInstrument(string, float, InstrumentSpec)
get(string):Instrument
guitarSearch(GuitarSpec):Guitar[*]
mandolinSearch(MandolinSpec):Mandolin[*]
}

class Guitar {
serialNumber string
price float
getSerialNumber():string
getPrice():float
setPrice(float)
getSpec():GuitarSpec
}

class Mandolin {
serialNumber string
price float
getSerialNumber():string
getPrice():float
setPrice(float)
getSpec():MandolinSpec
}

abstract class InstrumentSpec{
builder:Builder
type:Type
topWood:Wood
backWood:Wood
model:string
getBuilder():Builder
getModel():string
getType():Type
getBackWood():Wood
getTopWood():Wood
matches(InstrumentSpec):boolean
}

class GuitarSpec {
numStrings:int
getNumStrings():int
matches(GuitarSpec):boolean
}

class MandolinSpec {
style:Style
getStyle():Style
matches(MandolinSpec):boolean
}

Enum Style{
toString():string
}

Enum Builder{
toString():string
}

Enum Type{
toString():string
}

Enum Wood{
toString():string
}

abstract class Instrument{
serialNumber string
price float
getSerialNumber():string
getPrice():float
setPrice(float)
getSpec():InstrumentSpec
}

@enduml
